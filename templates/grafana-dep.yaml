apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana-mon-core
  namespace: monitoring
  labels:
    app: grafana
    component: core
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
      component: core
  template:
    metadata:
      labels:
        app: grafana
        component: core
    spec:
      containers:
      - image: grafana/grafana:latest
        name: grafana-core
        ports:
        - name: grafana
          containerPort: 3000
        resources:
          # keep request = limit to keep this container in guaranteed class
          limits:
            cpu: 100m
            memory: 200Mi
          requests:
            cpu: 100m
            memory: 100Mi
        env:
          # The following env variables set up basic auth twith the default admin user and admin password.
          - name: GF_AUTH_BASIC_ENABLED
            value: "true"
          - name: GF_SECURITY_ADMIN_USER
            valueFrom:
              secretKeyRef:
                name: {{ .Values.server.name }}-secret
                key: grafana-admin-user
          - name: GF_SECURITY_ADMIN_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ .Values.server.name }}-secret
                key: grafana-admin-password
          - name: GF_AUTH_ANONYMOUS_ENABLED
            value: "false"
          # - name: GF_AUTH_ANONYMOUS_ORG_ROLE
          #   value: Admin
          # does not really work, because of template variables in exported dashboards:
          # - name: GF_DASHBOARDS_JSON_ENABLED
          #   value: "true"
          # readinessProbe:
          #httpGet:
          # path: /login
          #  port: 3000
          # initialDelaySeconds: 30
          # timeoutSeconds: 1
        volumeMounts:
        - mountPath: /etc/grafana/provisioning/datasources
          name: grafana-datasources
        - mountPath: /var/lib/grafana
          name: grafana-storage
           
      securityContext:
        fsGroup: 0
        runAsNonRoot: false
        runAsUser: 0
      volumes:
       - name: config-volume
         configMap:
          name: {{ .Values.server.name }}-config
       - name: grafana-datasources
         configMap:
          name: {{ .Values.server.name }}-dashs
       - name: grafana-storage
         persistentVolumeClaim:
          claimName: {{ .Values.server.name }}-config